{"version":3,"sources":["resources/astronaut.svg","components/Search.js","components/ResultCard.js","components/Results.js","components/Footer.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Search","_Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onChange","event","niceInput","target","value","replace","state","input","setState","onSearch","onEmpty","inherits","createClass","key","_this2","react_default","a","createElement","className","icon","type","theme","index_es","id","defaultMessage","placeholder","size","allowClear","Component","Meta","Card","ResultCard","loading","card","hoverable","result","available","classStatus","status","href","url","rel","title","service","description","Results","results","i","push","components_ResultCard","map","res","message","length","Footer","Date","getFullYear","react_router_dom","to","src","alt","window","apiUrl","checkEndpoint","addLocaleData","concat","toConsumableArray","locale_en","locale_de","locale_tr","locale_es","locale_ca","controller","signal","messages","de","messages_de","en","messages_en","tr","messages_tr","ca","messages_ca","es","messages_es","language","navigator","split","App","componentDidMount","fetch","then","response","json","responseJson","sites","catch","e","console","log","componentWillReceiveProps","nextProps","lang","match","params","componentWillMount","componentWillUnmount","cancelAllRequests","search","username","isQueried","AbortController","checkUser","endpoint","newResults","debouncedSearch","debounce","inputChanged","inputEmptied","undefined","abort","content","landingPage","astronaut","values","appName","components_Results","locale","components_Search","components_Footer","Boolean","location","hostname","ReactDOM","render","react_router","path","component","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a0c412ab.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/astronaut.5bd53660.svg\";","import React, { Component } from 'react';\nimport { Input, Icon } from 'antd';\nimport { FormattedMessage } from 'react-intl';\nimport '../styles/Search.css';\n\nexport class Search extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            input: \"\"\n        }\n    }\n\n    onChange = (event) => {\n        // niceInput is the url friendly version of the input\n        let niceInput = event.target.value.replace(/[^a-zA-Z0-9-_.]/g, '');\n\n        if (niceInput !== this.state.input) {\n            this.setState({\n                input: niceInput\n            }, () => {\n                if (niceInput !== '') {\n                    this.props.onSearch(niceInput);\n                } else {\n                    this.props.onEmpty();\n                }\n            });\n        }\n    }\n    render() {\n        return (\n            <div className=\"search\">\n                <div className=\"header\">\n                    <Icon type=\"thunderbolt\" theme=\"filled\" />\n                    <h1>Instant Username Search</h1>\n                </div>\n                <FormattedMessage id=\"app.search.placeholder\" defaultMessage=\"Search username\">\n                    {\n                        placeholder => (\n                            <Input placeholder={placeholder} size=\"large\" allowClear\n                                value={this.state.input} onChange={this.onChange} />\n                        )\n                    }\n                </FormattedMessage>\n            </div>\n        );\n    }\n}\n\nexport default Search;\n","import React, { Component } from 'react';\nimport { Card } from 'antd';\nimport { FormattedMessage } from 'react-intl';\nimport '../styles/ResultCard.css';\n\nconst { Meta } = Card;\n\n\nclass ResultCard extends Component {\n    render() {\n        if (this.props.loading) {\n            return (\n                <div className={\"loading card\"}>\n                    <Card hoverable loading={true}>\n                    </Card>\n                </div>\n            );\n        } else {\n            let classStatus, status;\n            if (this.props.result.available) {\n                classStatus = \"available\";\n                status = <FormattedMessage id=\"card.available\"\n                    defaultMessage=\"Available\" />;\n            } else {\n                classStatus = \"taken\";\n                status = <FormattedMessage id=\"card.taken\"\n                    defaultMessage=\"Taken\" />;\n            }\n\n            return (\n                <div className={\"card \" + classStatus}>\n                    <a href={this.props.result.url} target=\"_blank\" rel=\"noopener noreferrer\">\n                        <Card hoverable>\n                            <Meta\n                                title={this.props.result.service}\n                                description={status}\n                            />\n                        </Card>\n                    </a>\n                </div>\n            );\n        }\n    }\n}\n\nexport default ResultCard;","import React, { Component } from 'react';\nimport Resultcard from './ResultCard';\nimport '../styles/Results.css';\n\nclass Results extends Component {\n\n    render() {\n        let results = [];\n        let loadingCount = 12;\n\n        if (this.props.loading === true) {\n            for (let i = 0; i < loadingCount; i++) {\n                results.push(<Resultcard key={i} loading={true} />);\n            }\n        } else {\n            results = this.props.results.map((res, i) => {\n                // message: error message from server\n                // if it exists, that means something went wrong on the server-side\n                if (res.message != null) {\n                    return null;\n                }\n                return (\n                    <Resultcard key={i} result={res} />\n                );\n            });\n            let i = 0;\n            while (results.length < loadingCount) {\n                results.push(<Resultcard key={results.length + i} loading={true} />);\n            }\n        }\n\n        return (\n            <div className=\"results\">\n                {results}\n            </div>\n        );\n    }\n}\n\nexport default Results;","import React, { Component } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Link } from \"react-router-dom\";\nimport '../styles/Footer.css';\n\nclass Footer extends Component {\n  render() {\n    return (\n      <footer className='footer'>\n        <div className='pull-left'>\n          <ul>\n            <li><a href=\"https://github.com/umutcanbolat/instant-username-search/blob/master/LICENSE\">{'© ' + new Date().getFullYear() + ' GPL 3.0'}</a></li>\n            <li><a href=\"https://github.com/umutcanbolat/instant-username-search/\">\n              <FormattedMessage id=\"app.contribute\"\n                defaultMessage=\"Fork on GitHub\" />\n            </a></li>\n\n          </ul>\n        </div>\n        <div className='languages pull-right'>\n          <ul>\n            <li><Link to=\"/ca\">Català</Link></li>\n            <li><Link to=\"/de\">Deutsch</Link></li>\n            <li><Link to=\"/en\">English</Link></li>\n            <li><Link to=\"/es\">Español</Link></li>\n            <li><Link to=\"/tr\">Türkçe</Link></li>\n          </ul>\n        </div>\n        <div className='coffee'>\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.buymeacoffee.com/1ulP4IGFm\">\n            <img src=\"https://www.buymeacoffee.com/assets/img/BMC-btn-logo.svg\" alt=\"Buy me a coffee!\" />\n            <span>\n              <FormattedMessage id=\"app.coffee\"\n                defaultMessage=\"Buy me a coffee\" />\n            </span>\n          </a>\n        </div>\n      </footer>\n    );\n  }\n}\nexport default Footer;","import React, { Component } from 'react';\nimport { debounce } from \"debounce\";\nimport Search from './Search';\nimport Results from './Results';\nimport Footer from './Footer';\nimport astronaut from '../resources/astronaut.svg'\nimport 'antd/dist/antd.css';  // or 'antd/dist/antd.less'\nimport '../styles/App.css';\nimport { IntlProvider } from \"react-intl\";\nimport { FormattedMessage } from 'react-intl';\nimport { addLocaleData } from \"react-intl\";\n\nimport locale_en from 'react-intl/locale-data/en';\nimport locale_de from 'react-intl/locale-data/de';\nimport locale_tr from 'react-intl/locale-data/tr';\nimport locale_es from 'react-intl/locale-data/es';\nimport locale_ca from 'react-intl/locale-data/ca';\n\nimport messages_de from \"../translations/de.json\";\nimport messages_en from \"../translations/en.json\";\nimport messages_tr from \"../translations/tr.json\";\nimport messages_es from \"../translations/es.json\";\nimport messages_ca from \"../translations/ca.json\";\n\nwindow.apiUrl = 'https://instant-username-search-api.herokuapp.com/';\nconst checkEndpoint = window.apiUrl + 'check';\n\naddLocaleData([...locale_en, ...locale_de, ...locale_tr, ...locale_es, ...locale_ca]);\nconst messages = {\n  'de': messages_de,\n  'en': messages_en,\n  'tr': messages_tr,\n  'ca': messages_ca,\n  'es': messages_es\n};\nvar language = navigator.language.split(/[-_]/)[0];  // language without region code\n\n// AbortController and signal to cancel fetch requests\nvar controller;\nvar signal;\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      sites: [],\n      results: [],\n      isQueried: false\n    }\n  }\n\n  componentDidMount = () => {\n    // fetch all the services available to check\n    fetch(window.apiUrl + 'services/getAll')\n      .then(response => response.json())\n      .then(responseJson => {\n        this.setState({\n          sites: responseJson\n        });\n      })\n      .catch((e) => {\n        console.log('error while fetching services list' + e.message);\n      });\n  }\n\n  componentWillReceiveProps = (nextProps) => {\n    const { match: { params: { lang } } } = nextProps;\n    if (lang) {\n      language = lang;\n    }\n  }\n\n  componentWillMount = () => {\n    const { match: { params: { lang } } } = this.props;\n    if (lang) {\n      language = lang;\n    }\n  }\n\n  componentWillUnmount = () => {\n    // cancel all requests before unmounting\n    this.cancelAllRequests();\n  }\n\n  search = (username) => {\n    if (this.state.isQueried) {\n      // instantiniate a new controller for this cycle\n      controller = new AbortController();\n      signal = controller.signal;\n\n      // loop through all sites and check the availability\n      for (let i = 0; i < this.state.sites.length; i++) {\n        const checkService = this.state.sites[i].endpoint;\n        const checkUser = checkService.replace('{username}', username);\n\n        fetch(checkEndpoint + checkUser, { signal })\n          .then(response => response.json())\n          .then(responseJson => {\n            let newResults = [].concat(this.state.results);\n            newResults.push(responseJson);\n            this.setState({\n              results: newResults\n            });\n          })\n          .catch((e) => {\n            //console.log(e.message);\n          });\n      }\n    }\n  }\n\n  // debounce the search function\n  debouncedSearch = debounce(this.search, 800);\n\n  // search on input changes\n  inputChanged = (input) => {\n    this.setState({\n      isQueried: true\n    });\n\n    this.cancelAllRequests();\n    this.setState({\n      results: []\n    });\n\n    // invoke debounced search\n    this.debouncedSearch(input);\n  }\n\n  inputEmptied = () => {\n    this.cancelAllRequests();\n    this.setState({\n      isQueried: false\n    });\n  }\n\n  cancelAllRequests = () => {\n    if (controller !== undefined) {\n      controller.abort();\n    }\n  }\n\n  render() {\n    let landingPage = (\n      <div className='landing'>\n        <img alt='astronaut' className='astronaut' src={astronaut} />\n        <div className='intro'>\n          <h2>\n            <FormattedMessage id=\"app.description.title\"\n              defaultMessage=\"Check username availability as you type\"\n              description=\"Description title on main page\" />\n          </h2>\n          <p>\n            <FormattedMessage id=\"app.description.body\"\n              defaultMessage=\"{appName} will check more than 100 social media sites for you. Results will appear here as you type!\"\n              description=\"Description body on main page\"\n              values={{ appName: 'Instant Username Search' }} />\n          </p>\n        </div>\n      </div>\n    );\n\n    let content;\n    if (this.state.isQueried) {\n      if (this.state.results.length === 0) {\n        // loading results\n        content = <Results loading={true} />;\n      } else {\n        // show results\n        content = <Results results={this.state.results} />;\n      }\n    } else {\n      // empty search\n      content = landingPage;\n    }\n\n    return (\n      <IntlProvider locale={language} messages={messages[language]}>\n        <div>\n          <div className=\"jumbotron\">\n            <div className=\"container\" id=\"jumbotron\">\n              <Search onSearch={this.inputChanged} onEmpty={this.inputEmptied} />\n            </div>\n          </div>\n          <div className=\"container\" id=\"content\">\n            {content}\n          </div>\n          <div id=\"footer\">\n            <hr />\n            <div className=\"container\">\n              <Footer />\n            </div>\n          </div>\n        </div>\n      </IntlProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter as Router, Route } from \"react-router-dom\";\n\n\n\n\nReactDOM.render(\n    <Router>\n        <Route path=\"/:lang?\" component={App} />\n    </Router>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}